//this is responsible for all authentication in  the app

import { NextAuthOptions } from "next-auth";

//an adapter for NextAuth that allows NextAuth to use Upstash Redis as a session store.
import { UpstashRedisAdapter } from "@next-auth/upstash-redis-adapter";
import { db } from "./db";
import GoogleProvider from "next-auth/providers/google"


function getGoogleCredentials() {
    const clientId = process.env.GOOGLE_CLIENT_ID;
    const clientSecret = process.env.GOOGLE_CLIENT_SECRET;

    if(!clientId || clientId.length===0)
        throw new Error('Missing GOOGLE_CLIENT_ID');

    if(!clientSecret || clientSecret.length===0)
        throw new Error('Missing GOOGLE_CLIENT_SECRET');

    return {clientId, clientSecret} 
}

//the variable authOptions has the type NextAuthOptions
export const authOptions: NextAuthOptions = {
    //the user data will be put into the database automatically
    //the adapter is made for redis, no need to worry about data persistance

    adapter: UpstashRedisAdapter(db),
    session: {
        strategy: 'jwt'   //JSON Web Tokens
    },
    pages: {
        signIn: '/login'
    },
    providers: [
        GoogleProvider({
            clientId: getGoogleCredentials().clientId,
            clientSecret: getGoogleCredentials().clientSecret,
        }),
    ],
    callbacks: {
        //The jwt callback is executed when a JSON Web Token (JWT) is created or verified during authentication. It is responsible for customizing the token's content based on the user's data fetched from the database.
        async jwt ({token, user}) {
            //the token.id is automatically generated by the adapter
            //User is defined in db.d.ts
            const dbUser = (await db.get(`user:${token.id}`)) as User | null;

            if (!dbUser){
                token.id = user!.id;
                return token;
            }

            return {
                id: dbUser.id,
                name: dbUser.name,
                email: dbUser.email,
                picture: dbUser.image,
            }
        },
        async session({session, token}){
            if(token) {
                session.user.id = token.id
                session.user.name =  token.name;
                session.user.email = token.email;
                session.user.image = token.picture;
            }

            return session;
        },
        redirect() {
            return '/dashboard'
        }
    }
}